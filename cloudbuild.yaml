steps:
  ## Uncomment building of build tools if they do not exist.
  # build sass tool
  # - name: 'gcr.io/cloud-builders/docker'
  #   dir: 'build_tools/sass'
  #   args: ['build', '-t', 'gcr.io/$PROJECT_ID/sass_builder', '.']

  #   # push sass tool image
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['push', 'gcr.io/$PROJECT_ID/sass_builder:latest']

  # # build firebase tool
  # - name: 'gcr.io/cloud-builders/docker'
  #   dir: 'build_tools/firebase'
  #   args: ['build', '-t', 'gcr.io/$PROJECT_ID/firebase', '.']

  # # push firebase tool image
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['push', 'gcr.io/$PROJECT_ID/firebase:latest']

  # # build nrwl tool
  # - name: 'gcr.io/cloud-builders/docker'
  #   dir: 'build_tools/nrwl'
  #   args: ['build', '-t', 'gcr.io/$PROJECT_ID/nrwl_builder', '.']

  # # push nrwl tool image
  # - name: 'gcr.io/cloud-builders/docker'
  #   args: ['push', 'gcr.io/$PROJECT_ID/nrwl_builder:latest']

  - name: 'gcr.io/$PROJECT_ID/nrwl_builder'
    args: ['install']

  # build stylesheets
  - name: 'gcr.io/$PROJECT_ID/sass_builder'
    args: ['./apps/sass/theme.scss', './apps/rockme/src/assets/theme.css']

  # decrypt environment file
  - name: gcr.io/cloud-builders/gcloud
    dir: apps/rockme/src/environments
    args:
      - kms
      - decrypt
      - --ciphertext-file=environment.prod.ts.enc
      - --plaintext-file=environment.ts
      - --location=global
      - --keyring=${_ENC_KEY_RING}
      - --key=${_ENC_KEY}

  - name: 'gcr.io/$PROJECT_ID/nrwl_builder'
    args: ['run-script', 'test', 'api']

  - name: 'gcr.io/$PROJECT_ID/nrwl_builder'
    args: ['run-script', 'test', 'rockme']

  - name: 'gcr.io/$PROJECT_ID/nrwl_builder'
    args: ['run-script', 'build', '--prod']

  - name: 'gcr.io/$PROJECT_ID/nrwl_builder'
    args: ['run-script', 'build', 'api', '--prod']

  - name: 'gcr.io/$PROJECT_ID/nrwl_builder'
    args: ['run-script', 'prebuild:apipackage']

  - name: 'gcr.io/$PROJECT_ID/nrwl_builder'
    args: ['run-script', 'prebuild:apidocker']

  - name: 'gcr.io/$PROJECT_ID/nrwl_builder'
    args: ['run-script', 'prebuild:apijson']

  # set firebase token
  - name: 'gcr.io/$PROJECT_ID/firebase'
    args: ['use', '$PROJECT_ID']
    secretEnv: ['FIREBASE_TOKEN']

  # deploy to firebase
  - name: 'gcr.io/$PROJECT_ID/firebase'
    args: ['deploy', '--only', 'hosting']
    secretEnv: ['FIREBASE_TOKEN']

  # build api image with arguments
  - name: 'gcr.io/cloud-builders/docker'
    dir: 'dist/apps/api'
    entrypoint: 'bash'
    args:
      [
        '-c',
        'docker build -t gcr.io/$PROJECT_ID/${_API_IMAGE_NAME}:latest -f Dockerfile --build-arg BUILD_COMMIT=$SHORT_SHA --build-arg DB_PASSWORD=$$DB_PASSWORD --build-arg FIREBASE_CONFIG=$$FIREBASE_CONFIG .',
      ]
    secretEnv: ['DB_PASSWORD', 'FIREBASE_CONFIG']
  # push api images
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/${_API_IMAGE_NAME}:latest']

  # deploy API to cloud run
  - name: 'gcr.io/cloud-builders/gcloud'
    args:
      [
        'beta',
        'run',
        'deploy',
        '${_API_SERVICE_NAME}',
        '--image',
        'gcr.io/$PROJECT_ID/${_API_IMAGE_NAME}',
        '--region',
        us-central1,
        '--platform',
        'managed',
        '--allow-unauthenticated',
        '--update-env-vars',
        'DB_ENV=production,CLOUD_SQL_CONNECTION_NAME=monorock:us-east1:monorock',
      ]
substitutions:
  _API_SERVICE_NAME: monorockapi
  _API_IMAGE_NAME: monorock-api
  _ENC_KEY_RING: monorock-integration-secrets
  _ENC_KEY: monorock-firebase-token

secrets:
  - kmsKeyName: projects/monorock/locations/global/keyRings/monorock-integration-secrets/cryptoKeys/monorock-firebase-token
    secretEnv:
      FIREBASE_TOKEN: CiQAy0NVR7SUUqDhfL1ij6knHd9sIiLX/kgy8pBEeUPIBWnF3vwSkAEAlioXGAphMnchTae3mzJ8Mav88uqFX4AgZj9s5qnkXEmSsTdgNcKd+7E+XvMoY0tDfLHh4kjFZEjsVUhE30FORC6+rDmrdaSEYpJNJ7tmJ14mrWvhLAz7AOLAqoFA0l0+yGdiM2UQYPnU4xkx51uJgtu1AS146XaVgOjk69UpyTVF1r/twGSl8Jx7cmqbGAY=
      DB_PASSWORD: CiQAy0NVR4Ip2VVuFB2q5yB+jadbf+OuomW22YG6htmjlbMb2vUSOQCWKhcYat9GRMvAyq2EdfSjvR8kT+zu/Z2YCATkoCxecsDgsA42BduqH1YRPGT6U6Gu1dY+bo44sg==
      FIREBASE_CONFIG: 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
